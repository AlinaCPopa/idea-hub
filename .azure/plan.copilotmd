## **Goal**
Guide deployment of the Idea Hub application to Azure Container Apps with AZD, using the existing Bicep template at `infra/main.bicep` and previously provisioned shared resources.

## **Project Information**
AppName: idea-hub
- **Technology Stack**: FastAPI backend (Python) with SQLite dev DB and Vite/React/TypeScript frontend
- **Application Type**: Full-stack idea tracking app with JWT auth, ideas CRUD, generated OpenAPI client
- **Containerization**: Dedicated Dockerfile per service plus docker-compose for local orchestration
- **Dependencies**: Relies on existing Azure Container Apps Environment, Log Analytics workspace, and Azure Container Registry
- **Hosting Recommendation**: Azure Container Apps for both backend API and frontend SPA containers

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**
```mermaid
graph TD
    subgraph Existing
        cae[Container Apps Environment]
        la[Log Analytics Workspace]
        acr[Azure Container Registry]
    end
    acr -->|Pull image| backend[(Backend Container App)]
    acr -->|Pull image| frontend[(Frontend Container App)]
    cae --> backend
    cae --> frontend
    backend -->|Expose ingress 8000| users((Clients))
    frontend -->|Serve SPA| users
    backend --> la
    frontend --> la
```
- Backend and frontend container apps share the managed environment for networking and logging.
- Both apps pull images tagged in the existing Azure Container Registry.
- Backend exposes HTTPS ingress for API consumers; frontend serves the SPA and calls the backend via container-app FQDN.

## **Recommended Azure Resources**

Recommended App service hosting the project
- Application idea-hub-backend
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption (default) with min 1 / max 5 replicas sized at 0.5 vCPU / 1 Gi (per current template)
  - Configuration:
    - language: python
    - dockerFilePath: backend/Dockerfile
    - dockerContext: backend
    - Environment Variables: [`APP_ENV=prod`, `SECRET_KEY` (from secure secret), `CORS_ORIGINS` if required]
  - Dependencies Resource
    - Dependency Name: Existing Container Apps Environment (`existingContainerAppsEnvironmentName`)
    - SKU: Managed (shared)
    - Service Type: Azure Container Apps Environment
    - Connection Type: Linked environment ID
    - Environment Variables: n/a (uses platform config)
    - Dependency Name: Existing Log Analytics Workspace (`existingLogAnalyticsName`)
    - SKU: Per Workspaces pricing tier configured previously
    - Service Type: Azure Monitor / Log Analytics
    - Connection Type: Diagnostic pipeline
    - Environment Variables: n/a

- Application idea-hub-frontend
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption (default) with min 1 / max 3 replicas sized at 0.25 vCPU / 0.5 Gi
  - Configuration:
    - language: nodejs
    - dockerFilePath: frontend/Dockerfile
    - dockerContext: frontend
    - Environment Variables: [`VITE_API_BASE=https://${backendAppName}.${location}.azurecontainerapps.io`]
  - Dependencies Resource
    - Dependency Name: Existing Container Apps Environment (`existingContainerAppsEnvironmentName`)
    - SKU: Managed (shared)
    - Service Type: Azure Container Apps Environment
    - Connection Type: Linked environment ID
    - Environment Variables: n/a
    - Dependency Name: Existing Log Analytics Workspace (`existingLogAnalyticsName`)
    - SKU: Per Workspaces pricing tier configured previously
    - Service Type: Azure Monitor / Log Analytics
    - Connection Type: Diagnostic pipeline
    - Environment Variables: n/a

Recommended Supporting Services
- Application Insights: Integrate via Log Analytics workspace (enable distributed logging later if needed)
- Log Analytics Workspace: `existingLogAnalyticsName` (already provisioned)
- Key Vault (Optional): Store long-term secrets or connection strings if moving beyond temporary injection
- Container Registry: `existingAcrName` (already provisioned with images pushed per release)

Recommended Security Configurations
- Assign a user-managed identity to each Container App and grant **AcrPull** role on the registry instead of anonymous pull (plan future enhancement).
- Store `SECRET_KEY` and future secrets in Key Vault with references instead of inline secure parameters.
- Ensure HTTPS ingress with managed certificates; restrict CORS origins to the published frontend domains.

## **Execution Step**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**
1. Analyze IaC requirements
    1. Use `mcp_azure_mcp_deploy` with `iac_rules_get` to confirm Container Apps conventions.
    2. Review `infra/main.bicep` and adjust parameters or resources as needed (ensure managed identities and Key Vault references for secrets in future revisions).
2. Validate and package container images
    1. Build backend and frontend images locally (e.g., `docker build -t <acr>.azurecr.io/ideahub-backend:<tag> backend`).
    2. Run local smoke tests / container checks.
    3. Push images to ACR and note tags for deployment parameters.
3. Deploy infrastructure and apps
    1. Run `az deployment group what-if --name idea-hub-preview --resource-group <rg> --template-file infra/main.bicep --parameters backendImageTag=<tag> frontendImageTag=<tag> secretKey=<value>` to preview changes.
    2. Execute `az deployment group create --name idea-hub --resource-group <rg> --template-file infra/main.bicep --parameters backendImageTag=<tag> frontendImageTag=<tag> secretKey=<value>` once validated.
4. Post-deployment verification
    1. Retrieve outputs for backend and frontend FQDNs from deployment results.
    2. Confirm backend health endpoint (`/health`) responds successfully.
    3. Validate frontend loads and can authenticate against backend using the published API base URL.
    4. Review Container App logs via `az containerapp logs show` or Azure Portal to ensure stable runtime.
5. Documentation
    1. Update `.github/copilot-instructions.md` checklist (Launch / Documentation) after validation.
    2. Record deployment summary and architecture updates in `.azure/summary.copilotmd` after completion.
